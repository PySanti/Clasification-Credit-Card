import pandas as pd
from sklearn.base import BaseEstimator, TransformerMixin


class FixNanRowsWithMean(BaseEstimator, TransformerMixin):
    """
       Tranformador creado para convertir todas las celdas Nan al promedio de la columna.

       El metodo tranform toma todas las columnas que contienen Nan y aplica el metodo fillna.
       Despues concatena el dataframe anterior con el dataframe conformado por todas las columnas que no tienen nan.

       No modificar los nans de las columnas no numericas (float64, int64)
    """
    def __init__(self):
        pass
    def fit(self, X, y=None):
        return self
    def transform(self, X, y=None):
        X = X.copy()
        nan_fixed_columns = X[X.columns[X.isna().any()]].apply(lambda col : col.fillna(col.mean()) if col.dtype != 'object' else col)
        not_nan_columns = X.loc[:, X.notna().all()]
        return pd.concat([not_nan_columns, nan_fixed_columns], axis=1)


class FillNanCatColWithMode(BaseEstimator, TransformerMixin):  
    """  
    Transformador que rellena los valores NaN en columnas categóricas  
    con el valor que más se repite (moda) en cada columna.  
    """  
    def __init__(self):  
        self.modes_ = {}  
        
    def fit(self, X, y=None):  
        # Identificar las columnas categóricas  
        cat_columns = X.select_dtypes(include=['object']).columns  
        
        # Calcular la moda para cada columna  
        self.modes_ = {col: X[col].mode()[0] for col in cat_columns}  
        
        return self  # No es necesario ajustar nada más  
        
    def transform(self, X, y=None):  
        # Hacer una copia del DataFrame original para evitar modificarlo directamente  
        X_copy = X.copy()  
        
        # Rellenar NaNs en las columnas categóricas con su moda  
        for col, mode in self.modes_.items():  
            X_copy.fillna({col: mode}, inplace=True)
        
        return X_copy


